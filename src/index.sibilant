(include "kit/header")
(import-namespace kit)

(macro def-curried (name args ...body)
       `(loose-var @name (R.curry (lambda @args ...@body)) ))

(require!
 (lit cond create extend mixin) "kit/js/util"

 R 'ramda

 Path 'path

 'assert 'chokidar 'fs
 (lit Tree-map) "tree-kit")

(load "kit-interface/header")
(load "kit-events/header")

(load "./interfaces/node.sibilant")
(load "./interfaces/file.sibilant")
(load "./interfaces/directory.sibilant")
(load "./interfaces/system.sibilant")

(load "./util")

(export File-system)

(assign exports.System File-system)

(def File-system.load (root-path)
  ((create File-system) root-path))

(assign exports.load File-system.load)


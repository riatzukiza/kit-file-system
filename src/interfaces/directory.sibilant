

(define Directory FS-node

  (def-generic set (rel value ( type File ) fs path)
    (.set fs (Path.join rel path) value type))

  (def-generic get  (rel fs path)
    (fs.find (Path.join path rel)))

  (def-generic set-value ()
    (then-do (mkdir this.path) this))

  (def-generic get-value ()
    (then-do (readdir this.path) this))

  (def-generic insert (rel  ( type File ) fs path)
    (.insert fs (Path.join rel path) type))

  (def-generic each (f children)
    (.then children (feach  f)))

  (def-generic map (f children)
    (.then children (fmap f)))

  (def-generic recursive-remove (path )
    (pipe this
          (.each (cond is.file (fpipe .delete) is.dir  (fpipe .recursive-remove)))
          (.then (fpipe .remove))))

  (def-generic remove-empty-directory (path)
    (rmdir path))

  (def-generic remove (path (recursive? false))
    (if recursive?
        (.recursive-remove this path)
        (.remove-empty-directory this path)))

  (gett sub-system ((create File-system) this.path))


  (gett keys (readdir this.path))

  (gett get-child (=> (d) (.get this d)))

  (gett children 
        (pipe this.keys
              (.then (fpipe (.map this.get-child)
                            Promise.all)))))

(export Directory)

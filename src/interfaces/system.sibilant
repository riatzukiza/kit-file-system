(import-namespace interface)
(def-curried *discover-node  (rel path seq *tree  sys stats)
  (.set *tree seq
        (if (.is-directory stats)
            ( (create Directory) rel path sys)
            ( (create File) rel path sys))))

(def *find-absolute-path (path root)
  (Path.resolve  root path))

(def-curried itterate (f file)
  (if (is-dir file)
      (.each file (itterate f))
      (f file)))

(define File-system Event-emitter

  (root ".")

  (init (root (*tree ((create Tree-map) ))))

  (def-generic find (rel *tree  root   )

    (var abs-path (*find-absolute-path rel root))
    (var seq (tokenize abs-path ))
    (var node (find-value seq *tree)
         sys this)

    (if node
        (.resolve Promise node)
        (.then (stat abs-path)
               (*discover-node rel abs-path seq *tree sys))))
  (def-generic exists (path)
    (pipe (.find this path)
          (.then (-> true))
          (.catch (-> false))))

  (def-generic watch (path opts root )
    (var sys this)
    ;; file watching should be an entirely seperate system.
    ;;(print "watch method of File-system is pending depreciation")
    (async-let ((node (.find sys path )))
      (assign node.*watcher
              (pipe chokidar
                    (.watch  node.path)
                    (on  'all (event-name changed-path stats)
                         (var rel (Path.relative root changed-path ))
                         (async-let ((changed-node (.find sys rel )))
                           (var event (lit (event event-name) (node changed-node)))
                           (.emit node "*" event)
                           (.emit node "all" event)
                           (.emit node event-name event)))))
      node))

  (def-generic insert (rel   ( type File ) root (sys this))
    (catch (.find sys path)
      (pipe (tokenize path)
            (.reduce  fill-sub-dir [(Promise.resolve) "./"])
            first
            (then-do (.set-value ((create type) rel path sys)  )))))

  (def-generic set (path v  ( type File ) root (sys this))
    (pipe (.insert sys path root)
          (.then (#-> (.set-value v)))))

  (def-generic delete (path))

  (def-generic each (f)
    (.then (.find this ".") (itterate f))))
